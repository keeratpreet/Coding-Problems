//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
    bool isCyclicBFS(int src , vector<int> adj[] , vector<int> &visited){
        queue<int> q ;
        unordered_map<int,int> parent ;
        parent[src] = -1 ;
        visited[src] =1 ;
        q.push(src);
        while(!q.empty()){
            int front = q.front();
            q.pop();
            
            for(auto i: adj[front]){
                if(visited[i]==1 && parent[front]!= i){
                    return true ;
                }else if(!visited[i]){
                    q.push(i);
                    parent[i] = front ;
                    visited[i]=1 ;
                }
            }
        }
        return false ;
    }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        vector<int> visited(V,0);
        bool ans=false;
        for(int i = 0 ; i<V ; i++){
            if(!visited[i]){
             ans = isCyclicBFS(i,adj,visited);
             if(ans == 1) return true ;
            }
    }
    return ans ;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
