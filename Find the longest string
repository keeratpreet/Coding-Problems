problem statement -> 
Given an array of strings arr[]. You have to find the longest string which is lexicographically smallest and
also all of its prefix strings are already present in the array.


//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function Template for C++

class Solution
{
public:
    string longestString(vector<string> &words)
    {
        // code here
        string ans="" ;
        sort(words.begin() , words.end());
        unordered_map<string,int> m ;
        for(auto word:words){
            m[word]++ ;
        }
        int size=INT_MIN ;
        for(auto word:words){
            string temp="";
            int cnt = 0 ;
            int n = word.size();
            
            for(int i=0 ; i<n ; i++){
                temp+=word[i];
                if(m[temp]){
                    cnt++;
                }
            }
            if(cnt == n && n>size){
                size = n ;
                ans = word ;
            }
        }
        return ans ;
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;
        vector<string> v(n);
        for (int i = 0; i < n; i++)
        {
            cin >> v[i];
        }
        Solution obj;
        string w = obj.longestString(v);
        cout << w << "\n";
    }
    return 0;
}

// } Driver Code Ends
